<?php
/**
 * @link      ZF3.Prototype.Project
 * @copyright Copyright (c) 2000-2018 The PHOENIX Developer Studio (http://simon-phoenix.se)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 */

namespace Application\Controller;

use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;

use Zend\View\Renderer\RendererInterface;

use ZendPdf\PdfDocument;
use ZendPdf\Style;
use ZendPdf\Page;
use ZendPdf\Font;
use ZendPdf\Image;
use ZendPdf\ObjectFactory;

class IndexController extends AbstractActionController
{

    public function indexAction()
    {
        return new ViewModel();
    }
    public function aboutAction()
    {
        return new ViewModel();
    }
    public function pdfsupportAction()
    {
        $pdf = new PdfDocument();
        //$pdf = \ZendPdf\PdfDocument::load(dirname(__FILE__) .'/document.pdf');

        // Reverse page order
        $pdf->pages = array_reverse($pdf->pages);

        // Create new Style
        $style = new Style();
        $style->setFillColor(new \ZendPdf\Color\Rgb(0, 0, 0.9));
        $style->setLineColor(new \ZendPdf\Color\GrayScale(0.2));
        $style->setLineWidth(3);
        $style->setLineDashingPattern(array(3, 2, 3, 4), 1.6);
        $fontH = \ZendPdf\Font::fontWithName(\ZendPdf\Font::FONT_HELVETICA_BOLD);
        $style->setFont($fontH, 32);




        foreach ($pdf->pages as $page){
            $page->saveGS()
                 ->setAlpha(0.25)
                 ->setStyle($style)
                 ->rotate(0, 0, M_PI_2/3);

            $page->saveGS();
            $page->clipCircle(550, -10, 50);

            $page->restoreGS();

            $page->drawText('Modified by Zend Framework!', 150, 0)
                 ->restoreGS();
        }

                // Add new page generated by ZendPdf\Pdf object
        // (page is attached to the specified the document)
        $pdf->pages[] = ($page1 = $pdf->newPage('A4'));

                // Create new font
                $font = \ZendPdf\Font::fontWithName(\ZendPdf\Font::FONT_HELVETICA);

                // Draw rectangle
                $page1->setFillColor(new \ZendPdf\Color\GrayScale(0.8))
                      ->setLineColor(new \ZendPdf\Color\GrayScale(0.2))
                      //->setLineDashingPattern(array(3, 2, 3, 4), 1.6)
                      ->setFillColor(\ZendPdf\Color\Html::color('#FFFFFF'))
                      ->drawRectangle(65, 720, 570, 40);
                      // 44 4 5 - 4 to odleglosc od prawego boku

                      $fontT = \ZendPdf\Font::fontWithName(\ZendPdf\Font::FONT_HELVETICA_BOLD);
                      $style->setFont($fontT, 32); 
        // Apply font and draw text
        $page1->setFont($fontT, 17)
              ->setFillColor(\ZendPdf\Color\Html::color('#990033'))
              ->drawText('PDF Support', 220, 740, "UTF-8");

                      // Apply font and draw text
        $page1->setFont($fontT, 10)
        ->setFillColor(\ZendPdf\Color\Html::color('#000000'))
        ->drawText('Created by PIOTR KROL', 279, 660, "UTF-8");


                      $fileName = 'report ('.date("Y-m-d").')'.'.pdf';

                      $response = $this->getResponse();
                      //$response->getHeaders()->addHeaders(array('Content-type' => 'application/pdf'));
                      $response->setContent($pdf->render());
      
      
                      $headers = new \Zend\Http\Headers();
                      $headers->addHeaderLine('Content-Type', 'application/pdf')
                              ->addHeaderLine('Content-Disposition', 'attachment; filename="' . $fileName . '"')
                              //->addHeaderLine('Content-Length', filesize($fileName))
                              //->addHeaderLine('Content-Length', strlen($fileName))
                              //strlen($fileContents)
                              ->addHeaderLine('Cache-Control: no-cache', 'must-revalidate')
                              ->addHeaderLine('Content-Description', 'File Transfer')
                              ->addHeaderLine('Cache-Control', 'must-revalidate')
                              ->addHeaderLine('Pragma', 'public');
      
                      $response->setHeaders($headers);
                      return $response;
    }

    public function languageAction()
    {
    	return $this->redirect()->toRoute('default', array(
    			'lang' => $this->params()->fromRoute('lang')
    	));
    }
}
